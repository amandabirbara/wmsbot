#pragma config(Motor,  port1,           Drive1,        tmotorVex393_HBridge, openLoop)
#pragma config(Motor,  port2,           Drive2,        tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port3,           Drive3,        tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,           Drive4,        tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port5,           LIft1,         tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port6,           Lift2,         tmotorVex393_MC29, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/* 

I am Optiwms Prime, and I send this message to any cool codder,
making robots at this super cool school.
We are here, we are waiting, we are programmers...
-Optiwms Prime

*/

task main()	{
 while (true) {
		// Used to filter out joystick abberations
		int threshold = 10;
		//////////////////////////////////////////////////////////
		//
		// DRIVE
		//
		// This code has filtering in place
		// Because the joystick returns a value that is not always
		// exactly zero.
		//
		// Because of this, the Cortex makes a whining sound
		// because the drive motors are being triggered
		// with values less than 10
		//
		// By testing if the joystick is within the threshold
		// We can turn off the motors and stop the noise
		// and power drain
		if(abs(vexRT[Ch3]) > threshold)         // If the left joystick is greater than or less than the threshold:
		{
			motor[dl1]  = (vexRT[Ch3] );
		}
		else                                    // If the left joystick is within the threshold:
		{
			motor[dl1]  = (0);
		}
		if(abs(vexRT[Ch2]) > threshold)         // If the right joystick is greater than or less than the threshold:
		{
			motor[dr1] = (vexRT[Ch2]);
		}
		else                                    // If the right joystick is within the threshold:
		{
			motor[dr1] = 0;                // Stop the right motor (cancel noise)
		}
	 
